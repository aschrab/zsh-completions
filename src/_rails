#compdef rails

_rails() {
  if (( CURRENT > 2 )); then
    __rails_dispatch
  else
    __rails_commands
  fi
}

__rails_commands() {
  typeset -ga _rails_common_cmd_list
  _rails_common_cmd_list=(
    generate
    console
    server
    dbconsole
    new
  )

  typeset -ga _rails_other_cmd_list
  _rails_other_cmd_list=(
    application
    destroy
    benchmarker
    profiler
    plugin
    runner
  )

  integer ret=1
  _describe -t rails-common-commands 'Common Rails command' _rails_common_cmd_list && ret=0
  _describe -t rails-other-commands 'Other Rails command' _rails_other_cmd_list && ret=0
  return ret
}

__rails_dispatch() {
  integer ret=1
  shift words
  (( CURRENT-- ))

  if (( $+functions[_rails-$words[1]] )); then
    _call_function ret _rails-$words[1]
  else
    _message "Can't dispatch to $words[1]"
  fi
}

_rails-generate() {
  integer ret=1
  shift words
  (( CURRENT-- ))

  if (( CURRENT > 1 )); then
    if (( $+functions[_rails-generate-$words[1]] )); then
      _call_function ret _rails-generate-$words[1]
    else
      _message "No completion for $words[1] generator"
    fi
  else
    if [[ ${+_rails_generator_list} == 0 ]]; then
      local output="$(_call_program rails_generators 'rails generate --help')"
      _rails_generator_list=(${${${(M)${(f)${output#*Please choose a generator below.}}:# *}#  }//:/\\:})
    fi
    _describe -t rails-generators 'Rails generator' _rails_generator_list && ret=0
    return ret
  fi
}

_rails-generate-model() {
  _arguments : \
    '--skip-namespace[Only affects isolated applications]' \
    '--old-style-hash[Use hash style compatible with Ruby 1.8]' \
    '(-o --orm)'{-o,--orm=}'[ORM to be used]:ORM: ' \
    '--migration=[Should a migration be generated]:Boolean:(true false)' \
    '--timestamps=[Control inclusion of timestamp fields]:Boolean:(true false)' \
    '--parent=[Parent class for generated model]:Parent model: ' \
    '--indexes=[Create indexes for references and belongs_to columns]:Boolean:(true false)' \
    '(-t --test-framework)'{-t,--test-framework=}'[Test framework to use]:Test framework: ' \
    '--fixture[Control generation of fixture]:Boolean:(true false)' \
    '(-r --fixture-replacement)'{-r,--fixture-replacement=}'[Fixture replacement to use]:Fixture replacement: ' \
    '(-f --force)'{-f,--force}'[Overwrite existing files]' \
    '(-p --pretend)'{-p,--pretend}'[Do not make any changes]' \
    '(-q --quiet)'{-q,--quiet}'[Suppress status output]' \
    '(-s --skip)'{-s,--skip}'[Skip files that already exist]' \
    '1:Model name: ' \
    '*:Field spec: '

}

# vim: filetype=zsh expandtab shiftwidth=2 foldmethod=marker
