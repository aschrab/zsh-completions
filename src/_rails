#compdef rails

_rails() {
  if (( CURRENT > 2 )); then
    __rails_dispatch
  else
    __rails_commands
  fi
}

__rails_commands() {
  typeset -ga _rails_common_cmd_list
  _rails_common_cmd_list=(
    generate
    console
    server
    dbconsole
    new
  )

  typeset -ga _rails_other_cmd_list
  _rails_other_cmd_list=(
    application
    destroy
    benchmarker
    profiler
    plugin
    runner
  )

  integer ret=1
  _describe -t rails-common-commands 'Common Rails command' _rails_common_cmd_list && ret=0
  _describe -t rails-other-commands 'Other Rails command' _rails_other_cmd_list && ret=0
  return ret
}

__rails_dispatch() {
  integer ret=1
  shift words
  (( CURRENT-- ))

  typeset -A aliases
  aliases=(
    'c'  'console'
    'd'  'destroy'
    'db' 'dbconsole'
    'g'  'generate'
    'r'  'runner'
    's'  'server'
  )

  local command=$words[1]
  (( $+aliases[$command] )) && command=$aliases[$command]

  if (( $+functions[_rails-$command] )); then
    _call_function ret _rails-$command
  else
    _message "Can't dispatch to $words[1]"
  fi
}

_rails-generate() {
  integer ret=1
  shift words
  (( CURRENT-- ))

  if (( CURRENT > 1 )); then
    if (( $+functions[_rails-generate-$words[1]] )); then
      _call_function ret _rails-generate-$words[1]
    else
      _message "No completion for $words[1] generator"
    fi
  else
    if [[ ${+_rails_generator_list} == 0 ]]; then
      local output="$(_call_program rails_generators 'rails generate --help')"
      _rails_generator_list=(${${${(M)${(f)${output#*Please choose a generator below.}}:# *}#  }//:/\\:})
    fi
    _describe -t rails-generators 'Rails generator' _rails_generator_list && ret=0
    return ret
  fi
}

__rails_setup_generate_model_arguments() {
  generate_model_arguments=(
      '--skip-namespace[Only affects isolated applications]' \
      '--old-style-hash[Use hash style compatible with Ruby 1.8]' \
      '(-o --orm)'{-o,--orm=}'[ORM to be used]:ORM: ' \
      '--migration=[Should a migration be generated]:Boolean:(true false)' \
      '--timestamps=[Control inclusion of timestamp fields]:Boolean:(true false)' \
      '--parent=[Parent class for generated model]:Parent model: ' \
      '--indexes=[Create indexes for references and belongs_to columns]:Boolean:(true false)' \
      '(-t --test-framework)'{-t,--test-framework=}'[Test framework to use]:Test framework: ' \
      '--fixture[Control generation of fixture]:Boolean:(true false)' \
      '(-r --fixture-replacement)'{-r,--fixture-replacement=}'[Fixture replacement to use]:Fixture replacement: ' \
      '(-f --force)'{-f,--force}'[Overwrite existing files]' \
      '(-p --pretend)'{-p,--pretend}'[Do not make any changes]' \
      '(-q --quiet)'{-q,--quiet}'[Suppress status output]' \
      '(-s --skip)'{-s,--skip}'[Skip files that already exist]' \
      '1:Model name: ' \
      '*:Field spec:_rails-generate-model-fieldspec'
  )
}

_rails-generate-model() {
  local -a generate_model_arguments
  __rails_setup_generate_model_arguments
  _arguments : ${generate_model_arguments}
}

_rails-generate-model-fieldspec() {
  typeset -a field_types
  field_types=(
    'binary'
    'boolean'
    'date'
    'datetime'
    'decimal'
    'float'
    'integer'
    'primary_key'
    'string'
    'text'
    'time'
    'timestamp'
  )

  case "$PREFIX" in
    ?*:?*:*)
      compset -P '*:'
      compadd -x "Index?" -- index uniq ''
      ;;
    ?*:*)
      compset -S ':*'
      compset -P '*:'
      compadd -x 'Field type'  -S : -q -a -- field_types
      ;;
    *)
      _message "Field name"
      ;;
  esac
}

_rails-generate-scaffold() {
  local -a generate_model_arguments
  __rails_setup_generate_model_arguments

  _arguments : ${generate_model_arguments} \
    '--force-plural[Force use of plural ModelName]' \
    '--resource-route[Control use of resource routes]:Boolean:(true false)' \
    '(-se --stylesheet-engine)'{-se,--stylesheet-engine=}'[Stylesheet engine to use]:Stylesheet engine: ' \
    '(-y --stylesheets)'{-y,--stylesheets}'[Control generation of stylesheets]:Boolean:(true false)' \
    '(-c --scaffold-controller)'{-c,--scaffold-controller=}'[Scaffold controller to be invoked]:Controller: ' \
    '--assets[Control generation of assets]:Boolean:(true false)'
}

_rails-server() {
  _arguments \
    '(-p --port)'{-p,--port=}'[Port to use]:Port: ' \
    '(-b --binding)'{-b,--binding=}'[Bind to specified IP address]:IP address: ' \
    '(-c --config)'{-c,--config=}'[Use custom rack config file]:File:_path_files' \
    '(-d --daemon)'{-d,--daemon}'[Run server as a daemon]' \
    '(-u --debugger)'{-u,--debugger}'[Enable ruby debugging]' \
    '(-e --environment)'{-e,--environment=}'[Environment to use]:Environment:(development test production)' \
    '(-P --pid)'{-P,--pid=}'[PID file location]:PID file:_path_files' \
    '(-h --help)'{-h,--help}'[Display help message]'
}

# vim: filetype=zsh expandtab shiftwidth=2 foldmethod=marker
