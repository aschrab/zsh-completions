#compdef openssl

_openssl() {
  setopt nonomatch
  local openssl==openssl

  if [[ $openssl = '=openssl' ]]; then
    _message "openssl executable not found: completion not available"
    return
  fi

  _get_openssl_commands

  if (( CURRENT > 2 )); then
    _openssl_dispatch
  else
    _openssl_commands
  fi
}

_get_openssl_commands() {
  if ! (( ${+_openssl_list_cmd_list} )); then
    typeset -ga _openssl_list_cmd_list
    _openssl_list_cmd_list=(
      list-standard-commands
      list-message-digest-commands
      list-cipher-commands
      list-cipher-algorithms
      list-message-digest-algorithms
      list-public-key-algorithms
    )
  fi

  if ! (( ${+_openssl_standard_cmd_list} )); then
    typeset -ga _openssl_standard_cmd_list
    _openssl_standard_cmd_list=( $(openssl list-standard-commands) )
  fi

  if ! (( ${+_openssl_digest_cmd_list} )); then
    typeset -ga _openssl_digest_cmd_list
    _openssl_digest_cmd_list=( $(openssl list-message-digest-commands) )
  fi

  if ! (( ${+_openssl_cipher_cmd_list} )); then
    typeset -ga _openssl_cipher_cmd_list
    _openssl_cipher_cmd_list=( $(openssl list-cipher-commands) )
  fi
}

_openssl_commands() {
  integer ret=1
  _describe -t cipher-commands 'Cipher command' _openssl_cipher_cmd_list && ret=0
  _describe -t digest-commands 'Digest command' _openssl_digest_cmd_list && ret=0
  _describe -t standard-commands 'Standard command' _openssl_standard_cmd_list && ret=0
  _describe -t list-commands 'List commands' _openssl_list_cmd_list && ret=0

  return ret
}

_openssl_dispatch() {
  integer ret=1
  shift words
  (( CURRENT-- ))

  # Check if there's a completion function for the specific subcommand
  if (( $+functions[_openssl-$words[1]] )); then
    _call_function ret _openssl-$words[1]
  # Digest commands can be handled by a common function
  elif (( $+_openssl_digest_cmd_list )); then
    _openssl_digest_command
  else
    _message "Can't dispatch to $words[1]"
  fi

  return ret
}

_openssl_pass_source() {
  _values -S : 'Password source' \
    'pass[Direct password entry]:password:' \
    'env[Get password from named environment variable]:environment:_parameters -g "*export*"' \
    'file[Get password from file]:password file:_files' \
    'fd[Read password from file descriptor #]:integer:' \
    'stdin[Read password from standard input]'
}

# Default completion for digest subcommands
_openssl_digest_command() {
  _arguments : \
    '-c[Print digest in two-digit groups separated by colons]' \
    '-d[Print BIO debugging information]' \
    '(-binary)-hex[Output digest as a hex dump]' \
    '(-hex -c)-binary[Output digest or signature in binary form]' \
    '-hmac[Set the HMAC key to ARG]:arg:' \
    '-non-fips-allow[Allow use of non-FIPS digest]' \
    '-out[Filename for output]:output file:_files' \
    '-sign[Sign the digest using key in file]:key file:_files' \
    '-keyform[Key format]:format:(PEM ENGINE)' \
    '-engine[Use engine ID]:Engine ID:' \
    '-sigopt[Signature options]:Signature option:' \
    '-passin[Private key password source]:Key source:_openssl_pass_source' \
    '-verify[Verify signature with public key FILE]:Public key file:_files' \
    '-prverify[Verify signature with private key FILE]:Private key file:_files' \
    '-signature[Verify signature in FILE]:Signature file:_files' \
    '-mac[Message Authenticate Code algorithm]:MAC algorithm:' \
    '-macopt[Options to pass to MAC algorithm]:MAC options:' \
    '-rand[File for random data]:Random source:_files' \
    '*: :_files'
}

_openssl "$@"
